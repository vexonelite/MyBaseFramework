<resources>
    <string name="app_name">RtBaseFramework</string>
    <string name="base_empty_string"/>
    <string name="base_data_been_loading">資料載入中&#8230;</string>
    <string name="base_been_processing">處理中&#8230;</string>

    <string name="base_action_submit">送出</string>
    <string name="base_action_confirm">確定</string>
    <string name="base_action_cancel">取消</string>
    <string name="base_action_done">完成</string>
    <string name="base_action_search">搜尋</string>
    <string name="base_action_create">新增</string>
    <string name="base_action_alter">修改</string>
    <string name="base_action_edit">編輯</string>

    <string name="base_sign_in">登入</string>
    <string name="base_been_signing_in">登入中&#8230;</string>
    <string name="base_hint_to_quit_app">再按一次返回鍵離開 APP</string>
    <string name="base_forget_dp">忘記密碼</string>
    <string name="base_logout">登出</string>
    <string name="base_logging_out">登出中&#8230;</string>
    <string name="base_would_you_like_to_logout">是否確定登出?</string>

    <string name="base_network_is_unavailable">請檢查網路連線</string>

    <string name="base_test_string_1">Update existing item</string>
    <string name="base_test_string_2">
		The previously saved programs will be restored.\n\nAre you sure to restore full data?
	</string>
    <string name="base_test_string_3">
		The bitter truth is that OOP fails at the only task it was intended to address.
It looks good on paper —
we have clean hierarchies of animals, dogs, humans, etc.
However, it falls flat once the complexity of the application starts increasing.
Instead of reducing complexity, it encourages promiscuous sharing of mutable state and
introduces additional complexity with its numerous design patterns.
OOP makes common development practices, like refactoring and testing, needlessly hard.
Some might disagree with me, but the truth is that
modern Java/C# OOP has never been properly designed.
It never came out of a proper research institution (in contrast with Haskell/FP).
Lambda calculus offers a complete theoretical foundation for Functional Programming.
OOP has nothing to match that.
Using OOP is seemingly innocent in the short-term,
especially on greenfield projects.
But what are the long-term consequences of using OOP?
OOP is a time bomb, set to explode sometime in the future when the codebase gets big enough.
	</string>

</resources>
